<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1492809609494">{:repl-history {:ide [], :local [{:command &quot;(tabular\n  (fact \&quot;The rules of Conway's life\&quot;\n        (alive? ?cell-status ?neighbor-count) =&gt; ?expected)\n\n  ?layout-string ?aligns ?spaces\n  \&quot; \&quot; [] [\&quot; \&quot;]\n  )&quot;, :offset 158, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;The rules of Conway's life\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string ?aligns ?spaces\n  \&quot; \&quot;            []      [\&quot;  \&quot;])&quot;, :offset 178, :ns &quot;string-layout.core-test&quot;} {:command &quot;(fact \&quot;Should throw exception on empty layout string\&quot;\n      (parse-layout-string \&quot;\&quot;) =&gt; (throws Exception))&quot;, :offset 107, :ns &quot;string-layout.core-test&quot;} {:command &quot;(parse-layout-string \&quot;\&quot;)&quot;, :offset 24, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;The rules of Conway's life\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string ?aligns ?spaces\n  \&quot; \&quot;            []      [\&quot; \&quot;])&quot;, :offset 177, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;The rules of Conway's life\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string ?aligns ?spaces\n  \&quot; \&quot;            []      [\&quot; \&quot;]\n  \&quot;[L]\&quot;          [:L]    [\&quot;\&quot;])&quot;, :offset 207, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;The rules of Conway's life\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string ?aligns ?spaces\n  \&quot; \&quot;            []      [\&quot; \&quot;]\n  \&quot;[L]\&quot;          [:L]    [\&quot;\&quot; \&quot;\&quot;])&quot;, :offset 210, :ns &quot;string-layout.core-test&quot;} {:command &quot;(autotest)&quot;, :offset 10, :ns &quot;string-layout.core-test&quot;} {:command &quot;(use 'clojure.repl)&quot;, :offset 19, :ns &quot;string-layout.core-test&quot;} {:command &quot;(use 'midje.repl)&quot;, :offset 17, :ns &quot;string-layout.core-test&quot;} {:command &quot;(doc midje-repl)&quot;, :offset 16, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly parse layout strings\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string ?aligns ?spaces\n  \&quot; \&quot;            []      [\&quot; \&quot;]\n  \&quot;[L]\&quot;          [:L]    [\&quot;\&quot; \&quot;\&quot;])&quot;, :offset 221, :ns &quot;string-layout.core-test&quot;} {:command &quot;(fact \&quot;Should throw exception on empty layout string\&quot;\n      (parse-layout-string \&quot;\&quot;) =&gt; (throws AssertionError))&quot;, :offset 112, :ns &quot;string-layout.core-test&quot;} {:command &quot;(check-facts :all)&quot;, :offset 18, :ns &quot;string-layout.core-test&quot;} {:command &quot;(ns string-layout.core-test\n\n  (:require [midje.sweet :refer :all]\n            [midje.repl :refer :all]\n            [string-layout.core :refer :all]))&quot;, :offset 150, :ns &quot;string-layout.core-test&quot;}], :remote []}}</component>
</project>