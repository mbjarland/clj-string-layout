<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="e3ce2c75-0126-48dc-a917-71cf2831dd61" name="Default" comment="">
      <change type="NEW" beforePath="" afterPath="$PROJECT_DIR$/.idea/replstate.xml" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/.idea/misc.xml" afterPath="$PROJECT_DIR$/.idea/misc.xml" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/.idea/workspace.xml" afterPath="$PROJECT_DIR$/.idea/workspace.xml" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/string_layout/core.clj" afterPath="$PROJECT_DIR$/src/string_layout/core.clj" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/string-layout.iml" afterPath="$PROJECT_DIR$/string-layout.iml" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/test/string_layout/core_test.clj" afterPath="$PROJECT_DIR$/test/string_layout/core_test.clj" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_TABLE_DETAILS" value="true" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="default_target" />
  <component name="FavoritesManager">
    <favorites_list name="string-layout" />
  </component>
  <component name="FileEditorManager">
    <leaf>
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/string_layout/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="562">
              <caret line="112" column="37" lean-forward="false" selection-start-line="112" selection-start-column="37" selection-end-line="112" selection-end-column="37" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>tabular</find>
      <find>autotest</find>
      <find>execute-format</find>
      <find>repeat</find>
      <find>split</find>
      <find>,</find>
      <find>align-char</find>
      <find>col-widths</find>
    </findStrings>
    <replaceStrings>
      <replace />
    </replaceStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GradleLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/test/string_layout/core_test.clj" />
        <option value="$PROJECT_DIR$/src/string_layout/core.clj" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="ProjectFrameBounds">
    <option name="width" value="1680" />
    <option name="height" value="1050" />
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scratches" />
      <pane id="ProjectPane">
        <subPane>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="string-layout" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="string-layout" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToFile.includeJavaFiles" value="false" />
    <property name="GoToClass.toSaveIncludeLibraries" value="false" />
    <property name="MemberChooser.sorted" value="false" />
    <property name="MemberChooser.showClasses" value="true" />
    <property name="GoToClass.includeLibraries" value="false" />
    <property name="MemberChooser.copyJavadoc" value="false" />
    <property name="settings.editor.selected.configurable" value="reference.settingsdialog.IDE.editor.colors.Debugger" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="SearchEverywhereHistoryKey" value="test&#9;FILE&#9;file:///Users/mbjarland/projects/clojure/clj-string-layout/test/string_layout/core_test.clj&#10;core.cl&#9;FILE&#9;file:///home/mbjarland/projects/clojure/string-layout/src/string_layout/core.clj&#10;core_test&#9;FILE&#9;file:///home/mbjarland/projects/clojure/string-layout/test/string_layout/core_test.clj" />
    <property name="FullScreen" value="true" />
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
  </component>
  <component name="ReplState" timestamp="1493015689604">{:repl-history {:ide [], :local [{:command &quot;(doseq [line (layout [[\&quot;to\&quot; \&quot;be\&quot; \&quot;or\&quot;]\n         [\&quot;not\&quot; \&quot;to\&quot; \&quot;be\&quot;]\n         [\&quot;that\&quot; \&quot;is\&quot; \&quot;the\&quot;]\n         [\&quot;question\&quot;]]\n        \&quot;[L] [C] [R]\&quot;\n        layout-config)]\n  (println line))&quot;, :offset 181, :ns &quot;string-layout.core&quot;} {:command &quot;(doseq [line \n    (layout [[\&quot;to\&quot; \&quot;better\&quot; \&quot;or\&quot;]\n             [\&quot;not\&quot; \&quot;to\&quot; \&quot;be\&quot;]\n             [\&quot;that\&quot; \&quot;is\&quot; \&quot;the\&quot;]\n             [\&quot;question\&quot;]]\n            \&quot;[L]  [X]  [R]\&quot;\n            layout-config)]\n  (println line))\n &quot;, :offset 9, :ns &quot;string-layout.core&quot;} {:command &quot;(doseq [line \n    (layout [[\&quot;to\&quot; \&quot;better\&quot; \&quot;or\&quot;]\n             [\&quot;not\&quot; \&quot;to\&quot; \&quot;be\&quot;]\n             [\&quot;that\&quot; \&quot;is\&quot; \&quot;the\&quot;]\n             [\&quot;question\&quot;]]\n            \&quot;[L]  [C]  [R]\&quot;\n            layout-config)]\n  (println line))\n &quot;, :offset 159, :ns &quot;string-layout.core&quot;} {:command &quot;(conj [1 2] 3)&quot;, :offset 13, :ns &quot;string-layout.core&quot;} {:command &quot;(conj [1 2] 3 4)&quot;, :offset 15, :ns &quot;string-layout.core&quot;} {:command &quot;(subvec [1 2 3 4 5] 2)&quot;, :offset 21, :ns &quot;string-layout.core&quot;} {:command &quot;(subvec [1 2 3 4 5] 2 4)&quot;, :offset 23, :ns &quot;string-layout.core&quot;} {:command &quot;(repeat 3 \&quot;\&quot;)&quot;, :offset 12, :ns &quot;string-layout.core&quot;} {:command &quot;(defn normalize-rows [col-count rows]\n  \&quot;Add empty elements to any rows which have fewer elements\n  col-count\&quot;\n  (map (fn [row]\n         (let [c (count row)\n               d (col-count - c)]\n           (cond\n             (zero? d) row\n             (pos?  d) (conj row (repeat d \&quot;\&quot;))\n             :else     (subvec row 0 (dec d)))))\n       rows))&quot;, :offset 345, :ns &quot;string-layout.core&quot;} {:command &quot;(normalize-rows \n  4\n  [[1 2 3 4]\n   [1 2]\n   [1 2 3 4 5])&quot;, :offset 58, :ns &quot;string-layout.core&quot;} {:command &quot;(normalize-rows \n  4\n  [[1 2 3 4]\n   [1 2]\n   [1 2 3 4 5])]&quot;, :offset 59, :ns &quot;string-layout.core&quot;} {:command &quot;(defn normalize-rows [col-count rows]\n  \&quot;Add empty elements to any rows which have fewer elements\n  col-count\&quot;\n  (map (fn [row]\n         (let [c (count row)\n               d (- col-count c)]\n           (cond\n             (zero? d) row\n             (pos?  d) (conj row (repeat d \&quot;\&quot;))\n             :else     (subvec row 0 (dec d)))))\n       rows))&quot;, :offset 345, :ns &quot;string-layout.core&quot;} {:command &quot;(defn normalize-rows [col-count rows]\n  \&quot;Add empty elements to any rows which have fewer elements\n  col-count\&quot;\n  (map (fn [row]\n         (let [c (count row)\n               d (- col-count c)]\n           (cond\n             (zero? d) row\n             (pos?  d) (conj row (repeat d \&quot;\&quot;))\n             :else     (subvec row 0 (dec col-count)))))\n       rows))&quot;, :offset 353, :ns &quot;string-layout.core&quot;} {:command &quot;(defn normalize-rows [col-count rows]\n  \&quot;Add empty elements to any rows which have fewer elements\n  col-count\&quot;\n  (map (fn [row]\n         (let [c (count row)\n               d (- col-count c)]\n           (cond\n             (zero? d) row\n             (pos?  d) (conj row (repeat d \&quot;\&quot;))\n             :else     (subvec row 0 col-count))))\n       rows))&quot;, :offset 347, :ns &quot;string-layout.core&quot;} {:command &quot;(merge [1 2] [3 4])&quot;, :offset 17, :ns &quot;string-layout.core&quot;} {:command &quot;(defn normalize-rows [col-count rows]\n  \&quot;Add empty elements to any rows which have fewer elements\n  col-count\&quot;\n  (map (fn [row]\n         (let [c (count row)\n               d (- col-count c)]\n           (cond\n             (zero? d) row\n             (pos?  d) (concat row (repeat d \&quot;\&quot;))\n             :else     (subvec row 0 col-count))))\n       rows))&quot;, :offset 349, :ns &quot;string-layout.core&quot;} {:command &quot;(concat [1 2] [3 4])&quot;, :offset 19, :ns &quot;string-layout.core&quot;} {:command &quot;(defn normalize-rows [col-count rows]\n  \&quot;Add empty elements to any rows which have fewer elements\n  col-count\&quot;\n  (map (fn [row]\n         (let [c (count row)\n               d (- col-count c)]\n           (cond\n             (zero? d) row\n             (pos?  d) (into [] (concat row (repeat d \&quot;\&quot;)))\n             :else     (subvec row 0 col-count))))\n       rows))&quot;, :offset 359, :ns &quot;string-layout.core&quot;} {:command &quot;(concat)&quot;, :offset 8} {:command &quot;(normalize-rows \n  4\n  [[1 2 3 4]\n   [1 2]\n   [1 2 3 4 5]])&quot;, :offset 58, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        rows (if (instance? String rows) [] (normalize-rows rows))\n        [aligns spaces] (parse-layout-string layout-string)\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (map count (filter #(not= % \&quot;fill\&quot;) spaces))))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (if (= (nth spaces i) \&quot;fill\&quot;)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))]\n    (map #(second\n            (reduce (fn [[i r] w]\n                      [(inc i) (str r (align w i) (space (inc i)))])\n                    [0 \&quot;\&quot;]\n                    %))\n         rows)))&quot;, :offset 1423, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (map count (filter #(not= % \&quot;fill\&quot;) spaces))))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (if (= (nth spaces i) \&quot;fill\&quot;)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))]\n    (map #(second\n            (reduce (fn [[i r] w]\n                      [(inc i) (str r (align w i) (space (inc i)))])\n                    [0 \&quot;\&quot;]\n                    %))\n         rows)))&quot;, :offset 1438, :ns &quot;string-layout.core&quot;} {:command &quot;(doseq [line \n    (layout [[\&quot;to\&quot; \&quot;better\&quot; \&quot;or\&quot;]\n             [\&quot;not\&quot; \&quot;to\&quot; \&quot;be\&quot;]\n             [\&quot;that\&quot; \&quot;is\&quot; \&quot;the\&quot;]\n             [\&quot;question\&quot;]]\n            \&quot;[L] | [C] | [R]\&quot;\n            layout-config)]\n  (println line))\n &quot;, :offset 163, :ns &quot;string-layout.core&quot;} {:command &quot;(defn parse-layout-string [layout-string]\n  {:pre [(not-empty layout-string)]}\n  (let [[_ aligns spaces]\n        (reduce (fn [[in-brace aligns spaces] c]\n                  (cond\n                    (= c \\[) [true aligns spaces]\n                    (= c \\]) [false aligns (conj spaces \&quot;\&quot;)]\n                    in-brace [in-brace (conj aligns (parse-align c)) spaces]\n                    :else [in-brace aligns (conj (into [] (butlast spaces)) (str (last spaces) c))]))\n                [false [] [\&quot;|\&quot;]]\n                layout-string)]\n    [aligns\n     (map #(if (= (.toLowerCase %) \&quot;fill\&quot;) \&quot;fill\&quot; %) spaces)]))&quot;, :offset 608, :ns &quot;string-layout.core&quot;} {:command &quot;(defn parse-layout-string [layout-string]\n  {:pre [(not-empty layout-string)]}\n  (let [[_ aligns spaces]\n        (reduce (fn [[in-brace aligns spaces] c]\n                  (cond\n                    (= c \\[) [true aligns spaces]\n                    (= c \\]) [false aligns (conj spaces \&quot;\&quot;)]\n                    in-brace [in-brace (conj aligns (parse-align c)) spaces]\n                    :else [in-brace aligns (conj (into [] (butlast spaces)) (str (last spaces) c))]))\n                [false [] [\&quot;\&quot;]]\n                layout-string)]\n    [aligns\n     (map #(if (= (.toLowerCase %) \&quot;fill\&quot;) \&quot;fill\&quot; %) spaces)]))&quot;, :offset 607, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (map count (filter #(not= % \&quot;fill\&quot;) spaces))))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (if (= (nth spaces i) \&quot;fill\&quot;)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))]\n    (map #(second\n            (reduce (fn [[i r] w]\n                      [(inc i) (str r (space (inc i)) (align w i))])\n                    [0 \&quot;\&quot;]\n                    %))\n         rows)))&quot;, :offset 1438, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (map count (filter #(not= % \&quot;fill\&quot;) spaces))))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (if (= (nth spaces i) \&quot;fill\&quot;)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))]\n    (map #(second\n            (reduce (fn [[i r] w]\n                      [(inc i) (str r (align w i) (space (inc i)))])\n                    [0 (first spaces)]\n                    %))\n         rows)))&quot;, :offset 1450, :ns &quot;string-layout.core&quot;} {:command &quot;(parse-layout-string \&quot;|[L] | [C] | [R]|\&quot;)&quot;, :offset 40, :ns &quot;string-layout.core&quot;} {:command &quot;(doseq [line \n    (layout [[\&quot;to\&quot; \&quot;better\&quot; \&quot;or\&quot;]\n             [\&quot;not\&quot; \&quot;to\&quot; \&quot;be\&quot;]\n             [\&quot;that\&quot; \&quot;is\&quot; \&quot;the\&quot;]\n             [\&quot;question\&quot;]]\n            \&quot;[L] | [C] | [R]|\&quot;\n            layout-config)]\n  (println line))\n &quot;, :offset 152, :ns &quot;string-layout.core&quot;} {:command &quot;(doseq [line \n    (layout [[\&quot;to\&quot; \&quot;better\&quot; \&quot;or\&quot;]\n             [\&quot;not\&quot; \&quot;to\&quot; \&quot;be\&quot;]\n             [\&quot;that\&quot; \&quot;is\&quot; \&quot;the\&quot;]\n             [\&quot;question\&quot;]]\n            \&quot;|[L] | [C] | [R]|\&quot;\n            layout-config)]\n  (println line))\n &quot;, :offset 153, :ns &quot;string-layout.core&quot;} {:command &quot;(split \&quot;a b\\naa bb\&quot; #\&quot; \&quot;)&quot;, :offset 23, :ns &quot;string-layout.core&quot;} {:command &quot;(split \&quot;a b\\naa bb\&quot; #\&quot;\\n\&quot;)&quot;, :offset 24, :ns &quot;string-layout.core&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly lay out simple expressions\&quot;\n        (let [cfg {:width ?width :align-char \\space}]\n        (layout (split rows #\&quot;\\n\&quot;) ?layout-string cfg) =&gt; ?expected-result\n        ?rows                    ?layout-string   ?width   ?expected-result\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;        20       [\&quot;a b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;         0       [\&quot;a b\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;        20       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;         0       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;       20       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;        0       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;     20       [\&quot;a                  b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;      0       [\&quot;ab\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;     10       [\&quot;a        b\&quot;  \&quot;aa      bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;      0       [\&quot;a  b\&quot;  \&quot;aabb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;    10       [\&quot;      a  b\&quot;  \&quot;     aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;    10       [\&quot; a  b     \&quot;  \&quot;aa bb     \&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;])))&quot;, :offset 1366, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly lay out simple expressions\&quot;\n        (layout (split rows #\&quot;\\n\&quot;) ?layout-string {:width ?width :align-char \\space}) =&gt; ?expected-result\n        ?rows                    ?layout-string   ?width   ?expected-result)\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;        20       [\&quot;a b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;         0       [\&quot;a b\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;        20       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;         0       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;       20       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;        0       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;     20       [\&quot;a                  b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;      0       [\&quot;ab\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;     10       [\&quot;a        b\&quot;  \&quot;aa      bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;      0       [\&quot;a  b\&quot;  \&quot;aabb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;    10       [\&quot;      a  b\&quot;  \&quot;     aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;    10       [\&quot; a  b     \&quot;  \&quot;aa bb     \&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;])&quot;, :offset 1342, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly lay out simple expressions\&quot;\n        (layout (split rows #\&quot;\\n\&quot;) ?layout-string {:width ?width :align-char \\space}) =&gt; ?expected-result)\n        ?rows                    ?layout-string   ?width   ?expected-result)&quot;, :offset 246, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly lay out simple expressions\&quot;\n        (layout (split rows #\&quot;\\n\&quot;) ?layout-string {:width ?width :align-char \\space}) =&gt; ?expected-result)\n        ?rows                    ?layout-string   ?width   ?expected-result\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;        20       [\&quot;a b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;         0       [\&quot;a b\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;        20       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;         0       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;       20       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;        0       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;     20       [\&quot;a                  b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;      0       [\&quot;ab\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;     10       [\&quot;a        b\&quot;  \&quot;aa      bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;      0       [\&quot;a  b\&quot;  \&quot;aabb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;    10       [\&quot;      a  b\&quot;  \&quot;     aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;    10       [\&quot; a  b     \&quot;  \&quot;aa bb     \&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;])&quot;, :offset 1342, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly lay out simple expressions\&quot;\n        (layout (clojure.string/split rows #\&quot;\\n\&quot;) ?layout-string {:width ?width :align-char \\space}) =&gt; ?expected-result)\n        ?rows                    ?layout-string   ?width   ?expected-result\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;        20       [\&quot;a b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;         0       [\&quot;a b\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;        20       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;         0       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;       20       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;        0       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;     20       [\&quot;a                  b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;      0       [\&quot;ab\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;     10       [\&quot;a        b\&quot;  \&quot;aa      bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;      0       [\&quot;a  b\&quot;  \&quot;aabb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;    10       [\&quot;      a  b\&quot;  \&quot;     aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;    10       [\&quot; a  b     \&quot;  \&quot;aa bb     \&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;])&quot;, :offset 1357, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly lay out simple expressions\&quot;\n        (layout (clojure.string/split ?rows #\&quot;\\n\&quot;) ?layout-string {:width ?width :align-char \\space}) =&gt; ?expected-result)\n        ?rows                    ?layout-string   ?width   ?expected-result\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;        20       [\&quot;a b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;         0       [\&quot;a b\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;        20       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;         0       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;       20       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;        0       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;     20       [\&quot;a                  b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;      0       [\&quot;ab\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;     10       [\&quot;a        b\&quot;  \&quot;aa      bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;      0       [\&quot;a  b\&quot;  \&quot;aabb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;    10       [\&quot;      a  b\&quot;  \&quot;     aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;    10       [\&quot; a  b     \&quot;  \&quot;aa bb     \&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;])&quot;, :offset 1358, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly lay out simple expressions\&quot;\n        (let [rows #(split % #\&quot; \&quot;) (map (split ?rows #\&quot;\\n\&quot;))]\n          (layout\n            rows\n            ?layout-string\n            {:width ?width :align-char \\space}) =&gt; ?expected-result))\n        ?rows                    ?layout-string   ?width   ?expected-result\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;        20       [\&quot;a b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;         0       [\&quot;a b\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;        20       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;         0       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;       20       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;        0       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;     20       [\&quot;a                  b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;      0       [\&quot;ab\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;     10       [\&quot;a        b\&quot;  \&quot;aa      bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;      0       [\&quot;a  b\&quot;  \&quot;aabb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;    10       [\&quot;      a  b\&quot;  \&quot;     aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;    10       [\&quot; a  b     \&quot;  \&quot;aa bb     \&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;])&quot;, :offset 1429, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly lay out simple expressions\&quot;\n        (let [rows (map #(split % #\&quot; \&quot;) (map (split ?rows #\&quot;\\n\&quot;)))]\n          (layout\n            rows\n            ?layout-string\n            {:width ?width :align-char \\space}) =&gt; ?expected-result))\n        ?rows                    ?layout-string   ?width   ?expected-result\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;        20       [\&quot;a b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;         0       [\&quot;a b\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;        20       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;         0       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;       20       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;        0       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;     20       [\&quot;a                  b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;      0       [\&quot;ab\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;     10       [\&quot;a        b\&quot;  \&quot;aa      bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;      0       [\&quot;a  b\&quot;  \&quot;aabb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;    10       [\&quot;      a  b\&quot;  \&quot;     aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;    10       [\&quot; a  b     \&quot;  \&quot;aa bb     \&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;])&quot;, :offset 1435, :ns &quot;string-layout.core-test&quot;} {:command &quot;(map #(split % #\&quot; \&quot;) (map (split \&quot;brother bob\\nthe marley\&quot; #\&quot;\\n\&quot;)))&quot;, :offset 51, :ns &quot;string-layout.core&quot;} {:command &quot;(map #(split % #\&quot; \&quot;) (split \&quot;brother bob\\nthe marley\&quot; #\&quot;\\n\&quot;))&quot;, :offset 61, :ns &quot;string-layout.core&quot;} {:command &quot;(mapv)&quot;, :offset 5} {:command &quot;(tabular\n  (fact \&quot;Should correctly parse layout strings\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string ?aligns ?spaces\n  \&quot; \&quot;            []      [\&quot; \&quot;]\n  \&quot;[L]\&quot;          [:L]    [\&quot;\&quot; \&quot;\&quot;])&quot;, :offset 221, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly parse layout strings\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string    ?aligns          ?spaces\n  \&quot; \&quot;               []               [\&quot; \&quot;]\n  \&quot;[L]\&quot;             [:L]             [\&quot;\&quot; \&quot;\&quot;]\n  \&quot;[L][C][R]\&quot;       [:L :C :R]       [\&quot;\&quot; \&quot;\&quot;])&quot;, :offset 302, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly parse layout strings\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string    ?aligns          ?spaces\n  \&quot; \&quot;               []               [\&quot; \&quot;]\n  \&quot;[L]\&quot;             [:L]             [\&quot;\&quot; \&quot;\&quot;]\n  \&quot;[L][C][R]\&quot;       [:L :C :R]       [\&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot;])&quot;, :offset 308, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly parse layout strings\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string    ?aligns          ?spaces\n  \&quot; \&quot;               []               [\&quot; \&quot;]\n  \&quot;[L]\&quot;             [:L]             [\&quot;\&quot; \&quot;\&quot;]\n  \&quot;[L][C][R]\&quot;       [:L :C :R]       [\&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot;]\n  \&quot;fill\&quot;            []               [:F]\n  \&quot;|[L]|[C]|\&quot;       [:L :C]          [\&quot;|\&quot; \&quot;|\&quot; \&quot;|\&quot;])&quot;, :offset 401, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly parse layout strings\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string    ?aligns          ?spaces\n  \&quot; \&quot;               []               [\&quot; \&quot;]\n  \&quot;[L]\&quot;             [:L]             [\&quot;\&quot; \&quot;\&quot;]\n  \&quot;[L][C][R]\&quot;       [:L :C :R]       [\&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot;]\n  \&quot;fill\&quot;            []               [:F]\n  \&quot;|[L]|[C]|\&quot;       [:L :C]          [\&quot;|\&quot; \&quot;|\&quot; \&quot;|\&quot;]\n   \&quot;[L]|[C]|\&quot;       [:L :C]          [\&quot;\&quot; \&quot;|\&quot; \&quot;|\&quot;]\n  \&quot;|[L]|[C]\&quot;        [:L :C]          [\&quot;|\&quot; \&quot;|\&quot; \&quot;\&quot;]\n  \&quot;[L]|[C]\&quot;         [:L :C]          [\&quot;\&quot; \&quot;|\&quot; \&quot;\&quot;]\n  \&quot;|[L][C]|\&quot;       [:L :C]           [\&quot;|\&quot; \&quot;\&quot; \&quot;|\&quot;]\n\n  )&quot;, :offset 604, :ns &quot;string-layout.core-test&quot;} {:command &quot;(defn parse-layout-string [layout-string]\n  {:pre [(not-empty layout-string)]}\n  (let [[_ aligns spaces]\n        (reduce (fn [[in-brace aligns spaces] c]\n                  (cond\n                    (= c \\[) [true aligns spaces]\n                    (= c \\]) [false aligns (conj spaces \&quot;\&quot;)]\n                    in-brace [in-brace (conj aligns (parse-align c)) spaces]\n                    :else [in-brace\n                           aligns\n                           (conj (into [] (butlast spaces)) (str (last spaces) c))]))\n                [false [] [\&quot;\&quot;]]\n                layout-string)]\n    [aligns\n     (mapv #(if (= (.toLowerCase %) \&quot;fill\&quot;) :F %) spaces)]))&quot;, :offset 658, :ns &quot;string-layout.core&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly parse layout strings\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string    ?aligns          ?spaces\n  \&quot; \&quot;               []               [\&quot; \&quot;]\n  \&quot;[L]\&quot;             [:L]             [\&quot;\&quot; \&quot;\&quot;]\n  \&quot;[L][C][R]\&quot;       [:L :C :R]       [\&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot;]\n  \&quot;fill\&quot;            []               [:F])&quot;, :offset 350, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly parse layout strings\&quot;\n        (parse-layout-string ?layout-string) =&gt; [?aligns ?spaces])\n  ?layout-string    ?aligns          ?spaces\n  \&quot; \&quot;               []               [\&quot; \&quot;]\n  \&quot;[L]\&quot;             [:L]             [\&quot;\&quot; \&quot;\&quot;]\n  \&quot;[L][C][R]\&quot;       [:L :C :R]       [\&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot;]\n  \&quot;fill\&quot;            []               [:F]\n  \&quot;|[L]|[C]|\&quot;       [:L :R]          [\&quot;|\&quot; \&quot;|\&quot; \&quot;|\&quot;])&quot;, :offset 401, :ns &quot;string-layout.core-test&quot;} {:command &quot;(mapv \n  #(split % #\&quot; \&quot;) \n  (split \&quot;brother bob\\nthe marley\&quot; #\&quot;\\n\&quot;))&quot;, :offset 5, :ns &quot;string-layout.core&quot;} {:command &quot;(use 'clojure.repl)&quot;, :offset 19, :ns &quot;string-layout.core&quot;} {:command &quot;(doc prn)&quot;, :offset 9, :ns &quot;string-layout.core&quot;} {:command &quot;(doc pr)&quot;, :offset 8, :ns &quot;string-layout.core&quot;} {:command &quot;(pr \&quot;bob\&quot;)&quot;, :offset 10, :ns &quot;string-layout.core&quot;} {:command &quot;(prn \&quot;bob\&quot;)&quot;, :offset 4, :ns &quot;string-layout.core&quot;} {:command &quot;(keep #(if (keyword %) nil (count %))\n      [\&quot;bob\&quot; :F \&quot;marley\&quot;])&quot;, :offset 61, :ns &quot;string-layout.core&quot;} {:command &quot;(keep #(if (keyword? %) nil (count %))\n      [\&quot;bob\&quot; :F \&quot;marley\&quot;])&quot;, :offset 20, :ns &quot;string-layout.core&quot;} {:command &quot;(keep (if (string? %) (count %)) &quot;, :offset 33, :ns &quot;string-layout.core&quot;} {:command &quot;(keep (if (string? %) (count %)) \n      [\&quot;bob\&quot; :F \&quot;marley\&quot;])&quot;, :offset 57, :ns &quot;string-layout.core&quot;} {:command &quot;(keep #(if (string? %) (count %)) \n      [\&quot;bob\&quot; :F \&quot;marley\&quot;])&quot;, :offset 7, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %) spaces))))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))]\n    (map #(second\n            (reduce (fn [[i r] w]\n                      [(inc i) (str r (align w i) (space (inc i)))])\n                    [0 (first spaces)]\n                    %))\n         rows)))&quot;, :offset 1443, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))]\n    (map #(second\n            (reduce (fn [[i r] w]\n                      [(inc i) (str r (align w i) (space (inc i)))])\n                    [0 (first spaces)]\n                    %))\n         rows)))&quot;, :offset 1443, :ns &quot;string-layout.core&quot;} {:command &quot;(if (string? :F) \&quot;marley\&quot;)&quot;, :offset 15, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 1541, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (prinltn spaces)\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 1574, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (println spaces)\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 1574, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (prn spaces)\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 1570, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (prn spaces \&quot;indexed with \&quot; i)\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 1588, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (prn spaces \&quot;indexed with \&quot; i (= (nth spaces i) :F))\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 1610, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (prn spaces \&quot;indexed with\&quot; i (= (nth spaces i) :F))\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 1609, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (prn spaces \&quot;indexed with\&quot; i (= (nth spaces i) :F) \&quot;fill-width\&quot; fill-width \&quot;align char\&quot; align-char)\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 1657, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (prn spaces \&quot;i\&quot; i (= (nth spaces i) :F) \&quot;fill-width\&quot; fill-width \&quot;align char\&quot; align-char)\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 1646, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fail (fn [msg] (throw (IllegalArgumentException. ^String msg)))\n\n        align (fn [w i]\n                (letfn [(fmt [f] (cl-format nil f align-char (nth col-widths i) w))]\n                  (case (nth aligns i)\n                    :L (fmt \&quot;~v,,,vA\&quot;)\n                    :R (fmt \&quot;~v,,,v@A\&quot;)\n                    :C (fmt \&quot;~v,,,v:@&lt;~A~&gt;\&quot;)\n                    ;:W (fmt (str \&quot;~{~&lt;~%~1,\&quot;  \&quot;:;~A~&gt; ~}\&quot;))\n                    (fail (str \&quot;Unsupported alignment operation '\&quot; (nth aligns i)\n                               \&quot;' encountered, index: \&quot; i \&quot;, aligns: \&quot; aligns))))\n\n                )\n        space (fn [i]\n                (prn spaces i (= (nth spaces i) :F) \&quot;fill-width\&quot; fill-width \&quot;align char\&quot; align-char)\n                (if (= (nth spaces i) :F)\n                  (apply str (repeat fill-width align-char))\n                  (nth spaces i)))\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 1642, :ns &quot;string-layout.core&quot;} {:command &quot;(defn layout [rows layout-string layout-config]\n  {:pre [(pos? (count rows))]}\n  (let [{:keys [align-char width]} layout-config\n        [aligns spaces] (parse-layout-string layout-string)\n        rows (if (instance? String rows) [] (normalize-rows (count aligns) rows))\n        col-widths (map #(apply max (map count %)) (transpose rows))\n        fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        align (partial align-word aligns col-widths align-char)\n        space (partial expand-fills spaces fill-width align-char)\n        indent-row (fn [row]\n                     (second\n                       (reduce (fn [[i r] w]\n                                 [(inc i) (str r (align w i) (space (inc i)))])\n                               [0 (first spaces)]\n                               row)))]\n    (map indent-row rows)))&quot;, :offset 922, :ns &quot;string-layout.core&quot;} {:command &quot;(tabular\n  (fact \&quot;Should correctly lay out simple expressions\&quot;\n        (let [rows (mapv #(split % #\&quot; \&quot;) (split ?rows #\&quot;\\n\&quot;))]\n          (layout\n            rows\n            ?layout-string\n            {:width ?width :align-char \\space}) =&gt; ?expected-result))\n        ?rows                    ?layout-string   ?width   ?expected-result\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;        20       [\&quot;a b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L] [R]\&quot;         0       [\&quot;a b\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;        20       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L] [R]\&quot;         0       [\&quot;a   b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;       20       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]  [R]\&quot;        0       [\&quot;a    b\&quot;  \&quot;aa  bb\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;     20       [\&quot;a                  b\&quot;]\n        \&quot;a b\&quot;                    \&quot;[L]fill[R]\&quot;      0       [\&quot;ab\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;     10       [\&quot;a        b\&quot;  \&quot;aa      bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[L]fill[R]\&quot;      0       [\&quot;a  b\&quot;  \&quot;aabb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;    10       [\&quot;      a  b\&quot;  \&quot;     aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;fill[R] [R]\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;    10       [\&quot; a  b     \&quot;  \&quot;aa bb     \&quot;]\n        \&quot;a b\\naa bb\&quot;             \&quot;[R] [R]fill\&quot;     0       [\&quot; a  b\&quot;  \&quot;aa bb\&quot;])&quot;, :offset 1430, :ns &quot;string-layout.core-test&quot;} {:command &quot;(expand-fills [\&quot;\&quot; :F] 5 \\* 1)&quot;, :offset 28, :ns &quot;string-layout.core&quot;} {:command &quot;(expand-fills [\&quot;\&quot; \&quot;bob\&quot;] 5 \\* 1)&quot;, :offset 22, :ns &quot;string-layout.core&quot;} {:command &quot;(tabular\n  (fact \&quot;Should expands fills\&quot;\n        (expand-fills ?spaces ?fill-width ?align-char ?i) =&gt; [?aligns ?spaces])\n  ?spaces      ?fill-width   ?align-char ?i ?expected-result\n  [\&quot;\&quot;]         10            \\*          0  \&quot;\&quot;\n\n  )&quot;, :offset 232, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should expands fills\&quot;\n        (expand-fills ?spaces ?fill-width ?align-char ?i) =&gt; ?expected-result)\n  ?spaces      ?fill-width   ?align-char ?i ?expected-result\n  [\&quot;\&quot;]         10            \\*          0  \&quot;\&quot;\n\n  )&quot;, :offset 231, :ns &quot;string-layout.core-test&quot;} {:command &quot;(tabular\n  (fact \&quot;Should expands fills\&quot;\n        (expand-fills ?spaces ?fill-width ?align-char ?i) =&gt; ?expected-result)\n  ?spaces      ?fill-width   ?align-char ?i ?expected-result\n  [\&quot;\&quot;]         5             \\*          0  \&quot;\&quot;\n  [\&quot; \&quot;]        5             \\*          0  \&quot; \&quot;\n  [\&quot;-\&quot;]        5             \\*          0  \&quot;-\&quot;\n  [:F]         5             \\*          0  \&quot;*****\&quot;\n  [\&quot; \&quot; :F]     5             \\*          0  \&quot; *****\&quot;\n  [:F \&quot; \&quot;]     5             \\*          0  \&quot;***** \&quot;\n  \n  )&quot;, :offset 487, :ns &quot;string-layout.core-test&quot;} {:command &quot;{:a 0 :b 1 :a 3}&quot;, :offset 15, :ns &quot;string-layout.core&quot;} {:command &quot;(assoc-in [[0 1 2]\n           [10 20 30]]\n          [0 0] 100)&quot;, :offset 61, :ns &quot;string-layout.core&quot;} {:command &quot;(assoc-in [[0 1 2]\n           [10 20 30]]\n          [1 0] 100)&quot;, :offset 54, :ns &quot;string-layout.core&quot;} {:command &quot;(assoc-in [[0 1 2]]\n          [0] 100)&quot;, :offset 31, :ns &quot;string-layout.core&quot;} {:command &quot;(assoc-in [[0 1 2]]\n          [0 0] 100)&quot;, :offset 34, :ns &quot;string-layout.core&quot;} {:command &quot;(assoc-in [0 1 2]\n          [0] 100)&quot;, :offset 30, :ns &quot;string-layout.core&quot;} {:command &quot;(.lastIndexOf :F [0 1 :F 234 \&quot;bob\&quot; :F \&quot;marley\&quot;])&quot;, :offset 45, :ns &quot;string-layout.core&quot;} {:command &quot;(.lastIndexOf [0 1 :F 234 \&quot;bob\&quot; :F \&quot;marley\&quot;] :F)&quot;, :offset 47, :ns &quot;string-layout.core&quot;} {:command &quot;(defn expand [spaces width col-widths align-char]\n  (let [fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fill-count (count #(keep keyword? spaces))\n        per-width (/ fill-width fill-count)\n        result (replace {:F (str (repeat per-width align-char))})\n        diff (- fill-width (* per-width fill-count))]\n    (if (zero? diff) result\n                     (assoc-in result\n                               [(.lastIndexOf spaces :F)]\n                               (+ per-width diff)))))&quot;, :offset 596, :ns &quot;string-layout.core&quot;} {:command &quot;(defn expand [spaces width col-widths align-char]\n  (let [fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fill-count (count (keep keyword? spaces))\n        per-width (/ fill-width fill-count)\n        result (replace {:F (str (repeat per-width align-char))})\n        diff (- fill-width (* per-width fill-count))]\n    (if (zero? diff) result\n                     (assoc-in result\n                               [(.lastIndexOf spaces :F)]\n                               (+ per-width diff)))))&quot;, :offset 595, :ns &quot;string-layout.core&quot;} {:command &quot;(defn expand [spaces width col-widths align-char]\n  (let [fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fill-count (count (keep keyword? spaces))\n        per-width (/ fill-width fill-count)\n        result (replace {:F (str (repeat per-width align-char))} spaces)\n        diff (- fill-width (* per-width fill-count))]\n    (if (zero? diff) result\n                     (assoc-in result\n                               [(.lastIndexOf spaces :F)]\n                               (+ per-width diff)))))&quot;, :offset 602, :ns &quot;string-layout.core&quot;} {:command &quot;(expand [\&quot;\&quot;] 10 [3 3] \\space)&quot;, :offset 29, :ns &quot;string-layout.core&quot;} {:command &quot;(defn expand [spaces width col-widths align-char]\n  (let [fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fill-count (count (keep keyword? spaces))\n        per-width (/ fill-width fill-count)\n        result (replace {:F (apply str (repeat per-width align-char))} spaces)\n        diff (- fill-width (* per-width fill-count))]\n    (if (zero? diff) result\n                     (assoc-in result\n                               [(.lastIndexOf spaces :F)]\n                               (+ per-width diff)))))&quot;, :offset 608, :ns &quot;string-layout.core&quot;} {:command &quot;(keep keyword? [\&quot;\&quot; :F])&quot;, :offset 23, :ns &quot;string-layout.core&quot;} {:command &quot;(defn expand [spaces width col-widths align-char]\n  (let [fill-width (max 0 (- width (+ (reduce + col-widths)\n                                      (reduce + (keep #(if (string? %) (count %)) spaces)))))\n        fill-count (count (filter keyword? spaces))\n        per-width (/ fill-width fill-count)\n        result (replace {:F (apply str (repeat per-width align-char))} spaces)\n        diff (- fill-width (* per-width fill-count))]\n    (if (zero? diff) result\n                     (assoc-in result\n                               [(.lastIndexOf spaces :F)]\n                               (+ per-width diff)))))&quot;, :offset 610, :ns &quot;string-layout.core&quot;} {:command &quot;(filter keyword? [\&quot;\&quot; :F])&quot;, :offset 7, :ns &quot;string-layout.core&quot;} {:command &quot;(expand [\&quot;\&quot; :F] 10 [3 3] \\space)&quot;, :offset 14, :ns &quot;string-layout.core&quot;} {:command &quot;(expand [:F \&quot;\&quot; :F] 10 [3 3] \\space)&quot;, :offset 12, :ns &quot;string-layout.core&quot;} {:command &quot;(expand [:F \&quot;\&quot; :F :F] 10 [3 3] \\space)&quot;, :offset 20, :ns &quot;string-layout.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.lein-repl">
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file id="idea.log" enabled="true" />
      <method />
    </configuration>
    <configuration default="true" type="Applet" factoryName="Applet">
      <module />
      <option name="HTML_USED" value="false" />
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <method />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <method />
    </configuration>
    <configuration default="true" type="ClojureScriptRunConfiguration" factoryName="Clojure Script">
      <module name="" />
      <setting name="path" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="" />
      <setting name="repl" value="false" />
      <method />
    </configuration>
    <configuration default="true" type="GradleRunConfiguration" factoryName="Gradle">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list />
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <method />
    </configuration>
    <configuration default="true" type="GrailsRunConfigurationType" factoryName="Grails">
      <setting name="vmparams" value="" />
      <setting name="cmdLine" value="run-app" />
      <setting name="passParentEnv" value="true" />
      <setting name="launchBrowser" value="true" />
      <setting name="launchBrowserUrl" value="" />
      <setting name="depsClasspath" value="false" />
      <method />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <envs />
      <patterns />
      <method />
    </configuration>
    <configuration default="true" type="JarApplication" factoryName="JAR Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="Java Scratch" factoryName="Java Scratch">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="SCRATCH_FILE_ID" value="0" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="JavaScriptTestRunnerJest" factoryName="Jest">
      <node-interpreter value="project" />
      <working-dir value="" />
      <envs />
      <scope-kind value="ALL" />
      <method />
    </configuration>
    <configuration default="true" type="JavaScriptTestRunnerProtractor" factoryName="Protractor">
      <config-file value="" />
      <node-interpreter value="project" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="JavascriptDebugType" factoryName="JavaScript Debug">
      <method />
    </configuration>
    <configuration default="true" type="JetRunConfigurationType" factoryName="Kotlin">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="string-layout" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType" factoryName="Kotlin script">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="filePath" />
      <option name="vmParameters" />
      <option name="alternativeJrePath" />
      <option name="programParameters" />
      <option name="passParentEnvs" value="true" />
      <option name="workingDirectory" />
      <option name="isAlternativeJrePathEnabled" value="false" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
      <method />
    </configuration>
    <configuration default="true" type="ScalaTestRunConfiguration" factoryName="ScalaTest">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <setting name="path" value="" />
      <setting name="package" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workingDirectory" value="" />
      <setting name="searchForTest" value="Across module dependencies" />
      <setting name="testName" value="" />
      <setting name="testKind" value="Class" />
      <setting name="showProgressMessages" value="true" />
      <setting name="useSbt" value="false" />
      <setting name="useUiWithSbt" value="false" />
      <classRegexps />
      <testRegexps />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="Specs2RunConfiguration" factoryName="Specs2">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <setting name="path" value="" />
      <setting name="package" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workingDirectory" value="" />
      <setting name="searchForTest" value="Across module dependencies" />
      <setting name="testName" value="" />
      <setting name="testKind" value="Class" />
      <setting name="showProgressMessages" value="true" />
      <setting name="useSbt" value="false" />
      <setting name="useUiWithSbt" value="false" />
      <classRegexps />
      <testRegexps />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="ANNOTATION_TYPE" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <envs />
      <properties />
      <listeners />
      <method />
    </configuration>
    <configuration default="true" type="js.build_tools.gulp" factoryName="Gulp.js">
      <node-interpreter>project</node-interpreter>
      <node-options />
      <gulpfile />
      <tasks />
      <arguments />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="js.build_tools.npm" factoryName="npm">
      <command value="run" />
      <scripts />
      <node-interpreter value="project" />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="osgi.bnd.run" factoryName="Run Launcher">
      <method />
    </configuration>
    <configuration default="true" type="osgi.bnd.run" factoryName="Test Launcher (JUnit)">
      <method />
    </configuration>
    <configuration default="true" type="uTestRunConfiguration" factoryName="utest">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <setting name="path" value="" />
      <setting name="package" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workingDirectory" value="" />
      <setting name="searchForTest" value="Across module dependencies" />
      <setting name="testName" value="" />
      <setting name="testKind" value="Class" />
      <setting name="showProgressMessages" value="true" />
      <setting name="useSbt" value="false" />
      <setting name="useUiWithSbt" value="false" />
      <classRegexps />
      <testRegexps />
      <envs />
      <method />
    </configuration>
    <configuration default="false" name="lein-repl" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="string-layout" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <method />
    </configuration>
    <list size="1">
      <item index="0" class="java.lang.String" itemvalue="Clojure REPL.lein-repl" />
    </list>
  </component>
  <component name="SbtLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="e3ce2c75-0126-48dc-a917-71cf2831dd61" name="Default" comment="" />
      <created>1492677758664</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1492677758664</updated>
      <workItem from="1492677762807" duration="8439000" />
      <workItem from="1492786764056" duration="141000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="8580000" />
  </component>
  <component name="TodoView">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="0" width="1680" height="1050" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="11" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.3386905" sideWeight="0.5" order="4" side_tool="true" content_ui="tabs" x="424" y="0" width="832" height="1046" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.24940476" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Database" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="true" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.39809525" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Nl-Palette" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="SLIDING" type="SLIDING" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Properties" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
    </layout>
    <layout-to-restore>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Nl-Palette" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="SLIDING" type="SLIDING" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.44410318" sideWeight="0.5" order="4" side_tool="true" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Properties" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Database" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Debug" active="true" anchor="bottom" auto_hide="true" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.39828694" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Messages" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="11" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.24980111" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="true" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
    </layout-to-restore>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="processedProjectFiles" value="true" />
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/test/string_layout/core_test.clj</url>
          <line>74</line>
          <properties />
          <option name="timeStamp" value="3" />
        </line-breakpoint>
      </breakpoints>
      <option name="time" value="9" />
    </breakpoint-manager>
    <watches-manager />
  </component>
  <component name="antWorkspaceConfiguration">
    <option name="IS_AUTOSCROLL_TO_SOURCE" value="false" />
    <option name="FILTER_TARGETS" value="false" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/string_layout/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="924">
          <caret line="42" column="30" lean-forward="false" selection-start-line="42" selection-start-column="30" selection-end-line="42" selection-end-column="30" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/string_layout/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1078">
          <caret line="49" column="89" lean-forward="true" selection-start-line="49" selection-start-column="89" selection-end-line="49" selection-end-column="89" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/string_layout/core_test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="42">
          <caret line="3" column="29" lean-forward="false" selection-start-line="3" selection-start-column="29" selection-end-line="3" selection-end-column="29" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/midje/midje/1.8.3/midje-1.8.3.jar!/midje/sweet.clj" />
    <entry file="file://$PROJECT_DIR$/src/string_layout/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="854">
          <caret line="61" column="67" lean-forward="false" selection-start-line="61" selection-start-column="67" selection-end-line="61" selection-end-column="67" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/string_layout/core_test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret line="3" column="29" lean-forward="false" selection-start-line="3" selection-start-column="29" selection-end-line="3" selection-end-column="29" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/midje/midje/1.8.3/midje-1.8.3.jar!/midje/sweet.clj" />
    <entry file="file://$PROJECT_DIR$/src/string_layout/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1800">
          <caret line="60" column="15" lean-forward="false" selection-start-line="60" selection-start-column="15" selection-end-line="60" selection-end-column="15" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.8.0/clojure-1.8.0.jar!/clojure/pprint/cl_format.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="585">
          <caret line="26" column="34" lean-forward="true" selection-start-line="26" selection-start-column="34" selection-end-line="26" selection-end-column="34" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/midje/midje/1.8.3/midje-1.8.3.jar!/midje/sweet.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.8.0/clojure-1.8.0.jar!/clojure/string.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="238">
          <caret line="305" column="16" lean-forward="true" selection-start-line="305" selection-start-column="16" selection-end-line="305" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/string_layout/core_test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="785">
          <caret line="66" column="2" lean-forward="false" selection-start-line="66" selection-start-column="2" selection-end-line="66" selection-end-column="2" />
          <folding>
            <marker date="1492965711000" expanded="true" signature="0:188" ph="(ns string-layout.core-test ...)" />
            <marker date="1492965711000" expanded="true" signature="190:302" ph="(fact =&gt; ...)" />
            <marker date="1492965711000" expanded="true" signature="1937:2537" ph="(tabular ?layout-string ...)" />
            <marker date="1492965711000" expanded="true" signature="2541:3026" ph="(tabular ?spaces ...)" />
            <marker date="1492965711000" expanded="true" signature="3028:4458" ph="(tabular ?rows ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/string_layout/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="562">
          <caret line="112" column="37" lean-forward="false" selection-start-line="112" selection-start-column="37" selection-end-line="112" selection-end-column="37" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <last-edited>groovy-2.4.6</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.6</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>string-layout</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.7</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clj-time:0.11.0</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>